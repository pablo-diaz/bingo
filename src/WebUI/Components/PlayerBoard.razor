@using WebUI.Models.GamePlayer
@using System.Linq

<div class="container-fluid bingo-board mb-5" translate="no">
    <div class="row">
        <div class="col bingo-b-header">B</div>
        <div class="col bingo-i-header">I</div>
        <div class="col bingo-n-header">N</div>
        <div class="col bingo-g-header">G</div>
        <div class="col bingo-o-header">O</div>
    </div>

    @for (var rowIndex = 0; rowIndex < ArrangedBalls.GetLength(0); rowIndex++)
    {
        <div class="row bingo-row"
             style="@(IsItWinnerBoard ? "display: none" : "")">
            @for (var columnIndex = 0; columnIndex < ArrangedBalls.GetLength(1); columnIndex++)
            {
                var ballInfo = ArrangedBalls[rowIndex, columnIndex];

                <div class="col bingo-cell @(GetCellClassForState(ballInfo))"
                     @onclick=@(() => BallClicked(ballInfo))>
                    <span>
                        @(ballInfo.IsItSpecialCharacterBall ? "" : ballInfo.Number.ToString())
                    </span>
                </div>
            }
        </div>
    }

    <div class="row bingo-row"
            style="@(!IsItWinnerBoard ? "display: none" : "")">
        <div class="col-12 bingo-winner"><p>&nbsp;</p></div>
    </div>
</div>

@code {
    private bool IsItWinnerBoard => Balls.Count == Balls.Count(ball => ball.HasPlayerSelectedIt);

    [Parameter]
    public Core.GameType GameType { get; set; }

    [Parameter]
    public List<BallModel> Balls { get; set; }

    private BallModel[,] ArrangedBalls;

    protected override void OnInitialized()
    {
        SetArrangedBallsAccordingToGameType();
    }

    private void SetArrangedBallsAccordingToGameType()
    {
        InitArrangedBallsByDefault();

        var bColumn = Balls.Where(ball => ball.Leter == "B").OrderBy(ball => ball.Number).ToList();
        var iColumn = Balls.Where(ball => ball.Leter == "I").OrderBy(ball => ball.Number).ToList();
        var nColumn = Balls.Where(ball => ball.Leter == "N").OrderBy(ball => ball.Number).ToList();
        var gColumn = Balls.Where(ball => ball.Leter == "G").OrderBy(ball => ball.Number).ToList();
        var oColumn = Balls.Where(ball => ball.Leter == "O").OrderBy(ball => ball.Number).ToList();

        switch (GameType)
        {
            case Core.GameType.STANDARD: SetArrangedBallsForStandardStructure(bColumn, iColumn, nColumn, gColumn, oColumn); break;
            case Core.GameType.L: SetArrangedBallsForLStructure(bColumn, iColumn, nColumn, gColumn, oColumn); break;
            case Core.GameType.O: SetArrangedBallsForOStructure(bColumn, iColumn, nColumn, gColumn, oColumn); break;
            case Core.GameType.T: SetArrangedBallsForTStructure(bColumn, iColumn, nColumn, gColumn, oColumn); break;
            case Core.GameType.X: SetArrangedBallsForXStructure(bColumn, iColumn, nColumn, gColumn, oColumn); break;
            default: throw new ApplicationException("Unknown game type");
        }
    }

    private void InitArrangedBallsByDefault()
    {
        this.ArrangedBalls = new BallModel[5, 5];
        for (var rowIndex = 0; rowIndex < 5; rowIndex++)
        {
            for (var columnIndex = 0; columnIndex < 5; columnIndex++)
                this.ArrangedBalls[rowIndex, columnIndex] = BallModel.CreateSpecialCharacterBall();
        }
    }

    private void SetArrangedBallsForStandardStructure(List<BallModel> bColumn, List<BallModel> iColumn,
        List<BallModel> nColumn, List<BallModel> gColumn, List<BallModel> oColumn)
    {
        for (var rowIndex = 0; rowIndex < 5; rowIndex++)
        {
            this.ArrangedBalls[rowIndex, 0] = bColumn[rowIndex];
            this.ArrangedBalls[rowIndex, 1] = iColumn[rowIndex];
            this.ArrangedBalls[rowIndex, 3] = gColumn[rowIndex];
            this.ArrangedBalls[rowIndex, 4] = oColumn[rowIndex];

            if (rowIndex != 2)
            {
                var nColumnRowIndex = rowIndex < 2 ? rowIndex : rowIndex - 1;
                this.ArrangedBalls[rowIndex, 2] = nColumn[nColumnRowIndex];
            }
        }
    }

    private void SetArrangedBallsForTStructure(List<BallModel> bColumn, List<BallModel> iColumn,
        List<BallModel> nColumn, List<BallModel> gColumn, List<BallModel> oColumn)
    {
        this.ArrangedBalls[0, 0] = bColumn[0];
        this.ArrangedBalls[0, 1] = iColumn[0];
        this.ArrangedBalls[0, 3] = gColumn[0];
        this.ArrangedBalls[0, 4] = oColumn[0];

        for (var index = 0; index < 5; index++)
            this.ArrangedBalls[index, 2] = nColumn[index];
    }

    private void SetArrangedBallsForLStructure(List<BallModel> bColumn, List<BallModel> iColumn,
        List<BallModel> nColumn, List<BallModel> gColumn, List<BallModel> oColumn)
    {
        for (var index = 0; index < 5; index++)
            this.ArrangedBalls[index, 0] = bColumn[index];

        this.ArrangedBalls[4, 1] = iColumn[0];
        this.ArrangedBalls[4, 2] = nColumn[0];
        this.ArrangedBalls[4, 3] = gColumn[0];
        this.ArrangedBalls[4, 4] = oColumn[0];
    }

    private void SetArrangedBallsForOStructure(List<BallModel> bColumn, List<BallModel> iColumn,
        List<BallModel> nColumn, List<BallModel> gColumn, List<BallModel> oColumn)
    {
        for (var index = 0; index < 5; index++)
            this.ArrangedBalls[index, 0] = bColumn[index];

        for (var index = 0; index < 5; index++)
            this.ArrangedBalls[index, 4] = oColumn[index];

        this.ArrangedBalls[0, 1] = iColumn[0];
        this.ArrangedBalls[4, 1] = iColumn[1];

        this.ArrangedBalls[0, 2] = nColumn[0];
        this.ArrangedBalls[4, 2] = nColumn[1];

        this.ArrangedBalls[0, 3] = gColumn[0];
        this.ArrangedBalls[4, 3] = gColumn[1];
    }

    private void SetArrangedBallsForXStructure(List<BallModel> bColumn, List<BallModel> iColumn,
        List<BallModel> nColumn, List<BallModel> gColumn, List<BallModel> oColumn)
    {
        this.ArrangedBalls[0, 0] = bColumn[0];
        this.ArrangedBalls[4, 0] = bColumn[1];

        this.ArrangedBalls[1, 1] = iColumn[0];
        this.ArrangedBalls[3, 1] = iColumn[1];

        this.ArrangedBalls[2, 2] = nColumn[0];

        this.ArrangedBalls[1, 3] = gColumn[0];
        this.ArrangedBalls[3, 3] = gColumn[1];

        this.ArrangedBalls[0, 4] = oColumn[0];
        this.ArrangedBalls[4, 4] = oColumn[1];
    }

    private string GetCellClassForState(BallModel ballInfo)
    {
        if (ballInfo.IsItSpecialCharacterBall) return "bingo-blocked-cell";

        if (ballInfo.HasPlayerSelectedIt) return "bingo-selected-cell";

        if (ballInfo.IsItPossibleToSelect) return "bingo-possible-cell";

        return "bingo-ready-cell";
    }

    private void BallClicked(BallModel ballInfo)
    {
        if (ballInfo.IsItPossibleToSelect)
        {
            ballInfo.HasPlayerSelectedIt = true;
            StateHasChanged();
        }
    }
}