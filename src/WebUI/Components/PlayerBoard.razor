@using WebUI.Models.GamePlayer 

<table class="shadow-lg p-3 mb-5 bg-white rounded @(GetBoardClass())">
    <thead>
        <tr>
            <th style="text-align: center">B</th>
            <th style="text-align: center">I</th>
            <th style="text-align: center">N</th>
            <th style="text-align: center">G</th>
            <th style="text-align: center">O</th>
        </tr>
    </thead>
    <tbody>
        @for(var rowIndex = 0; rowIndex < ArrangedBalls.GetLength(0); rowIndex++)
        {
            <tr>
                @for(var columnIndex = 0; columnIndex < ArrangedBalls.GetLength(1); columnIndex++)
                {
                    var ballInfo = ArrangedBalls[rowIndex, columnIndex];
                    <td>
                        <button disabled=@ballInfo.HasPlayerSelectedIt 
                                class="btn @(GetButtonClassForState(ballInfo))"
                                @onclick=@(() => BallClicked(ballInfo))>
                                    @(ballInfo.IsItSpecialCharacterBall ? "X" : ballInfo.Number.ToString())
                        </button>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public int BoardNumber { get; set; }

    [Parameter]
    public List<BallModel> Balls { get; set; }

    private BallModel[,] ArrangedBalls;

    protected override void OnInitialized()
    {
        var bColumn = Balls.Where(ball => ball.Leter == "B").OrderBy(ball => ball.Number).ToList();
        var iColumn = Balls.Where(ball => ball.Leter == "I").OrderBy(ball => ball.Number).ToList();
        var nColumn = Balls.Where(ball => ball.Leter == "N").OrderBy(ball => ball.Number).ToList();
        var gColumn = Balls.Where(ball => ball.Leter == "G").OrderBy(ball => ball.Number).ToList();
        var oColumn = Balls.Where(ball => ball.Leter == "O").OrderBy(ball => ball.Number).ToList();

        this.ArrangedBalls = new BallModel[5, 5];
        for(var rowIndex = 0; rowIndex < 5; rowIndex++)
        {
            this.ArrangedBalls[rowIndex, 0] = bColumn[rowIndex];
            this.ArrangedBalls[rowIndex, 1] = iColumn[rowIndex];
            this.ArrangedBalls[rowIndex, 3] = gColumn[rowIndex];
            this.ArrangedBalls[rowIndex, 4] = oColumn[rowIndex];

            if (rowIndex != 2)
            {
                var nColumnRowIndex = rowIndex < 2 ? rowIndex : rowIndex - 1;
                this.ArrangedBalls[rowIndex, 2] = nColumn[nColumnRowIndex];
            }
            else
                this.ArrangedBalls[rowIndex, 2] = BallModel.CreateSpecialCharacterBall();
        }
    }

    private string GetButtonClassForState(BallModel ballInfo)
    {
        if (ballInfo.HasPlayerSelectedIt) return "btn-success";

        if (ballInfo.IsItPossibleToSelect) return "btn-outline-danger";

        return "btn-outline-primary";
    }

    private void BallClicked(BallModel ballInfo)
    {
        if(ballInfo.IsItPossibleToSelect)
        {
            ballInfo.HasPlayerSelectedIt = true;
            StateHasChanged();
        }
    }

    private string GetBoardClass()
    {
        var boardClasses = new string[] { "bingo-board-1", "bingo-board-2", "bingo-board-3" };
        return boardClasses[this.BoardNumber % boardClasses.Length];
    }
}